name: Untagged Container Cleanup

on:
  workflow_call:
    inputs:
      package:
        description: "Name of the container registry package"
        required: true
        type: string
      older_than:
        description: "Only remove untagged container images at least as old as this (in days)"
        required: false
        default: -1
        type: number
      untagged_timestamp_tolerance:
        description: "Do not remove untagged container images if they have a created timestamp this close (in milliseconds) to a tagged container image"
        required: false
        default: 10000
        type: number

jobs:
  cleanup-untagged:
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup untagged containers
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const package = "${{ inputs.package }}";
            const olderThan = ${{ inputs.older_than }};
            const untaggedTsTolerance = ${{ inputs.untagged_timestamp_tolerance }};
            const olderThanTime = new Date();
            olderThanTime.setDate(olderThanTime.getDate() - olderThan);

            const containerImages = await github.paginate(github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg, {
                package_type: 'container',
                package_name: package,
                org: context.repo.owner,
                per_page: 100,
            });
            const taggedImages = containerImages.filter(p => (p.metadata?.container?.tags ?? []).length > 0);
            const untaggedItems = containerImages.filter(p => {
                // check that images are old enough
                const pCreated = new Date(p.created_at);
                if (olderThan > 0) {
                  if (pCreated >= olderThanTime) {
                    return false;
                  }
                }

                // check that images are not too close to tagged images
                if (untaggedTsTolerance < 0) {
                  return true;
                } else {
                  return !taggedImages.some(t => Math.abs((new Date(t.created_at)).getTime() - pCreated.getTime()) < untaggedTsTolerance);
                }
            });

            console.log(`Found ${untaggedItems.length} untagged images no longer necessary`);
            for (const untagged of untaggedItems) {
                await github.rest.packages.deletePackageVersionForOrg({
                    packate_type: 'container',
                    package_name: package,
                    org: context.repo.owner,
                    package_version_id: untagged.id,
                });
                console.log(`Deleted untagged container image '${untagged.name}'`);
            }
